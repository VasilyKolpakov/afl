# import syscalls.2s
# import the_dictionary.2s

# <func> -> <length>
def "stacktrace_get_func_instruction_count" {
    + 1
    drop
    while { lazy_and { not = jmp_instruction_code read_mem_i64 dup } not = return_instruction_code read_mem_i64 dup } {
        swap + 1 swap
        + -8
    } # <func> <count>
    swap
    0
} ;

# <func> -> <first (ret) func addr>
def "stacktrace_get_func_first_pointer" {
    - swap * 8 stacktrace_get_func_instruction_count dup
} ;

# <i pointer> -> <func name or "#?#">
def "stacktrace_print_func_name_by_instruction_pointer" {
    if { not = 0 dup } {
        print_string the_dictionary_dict_record_name # <record> <i pointer>
    } { print_string "?" drop }
    drop swap
    while {
        lazy_and {
            not lazy_and { stacktrace_instruction_pointer_is_in_function the_dictionary_word_def_address the_dictionary_dict_record_word_def 2dup }
            the_dictionary_word_def_is_function the_dictionary_dict_record_word_def dup
        }
        not = 0 dup
    } {
        the_dictionary_dict_record_next
#        print_newline print_string stacktrace_dict_record_name print_string "func search loop:   " dup
    } the_dictionary_def_list 
} ;

# <function> <instruction pointer> -> <bool>
def "stacktrace_instruction_pointer_is_in_function" {
    and
    dip { >= }
    <= stacktrace_get_func_first_pointer 2dup
} ;


# <skip return stack slots> ->
def "stacktrace_print_return_stack_except_n_slots" {
    drop
    while { > + -11 return_stack_depth dup } {
        + 1
        print_newline stacktrace_print_func_name_by_instruction_pointer r_pick dup
    } + 5
} ;

write_mem_i64 sigsegv_handler_pointer {
    exit 1
    stacktrace_print_return_stack_except_n_slots 1
    print_newline stacktrace_print_func_name_by_instruction_pointer # instruction pointer value at the moment of sigsegv is saven on top of the data stack
    print_string "Stacktrace:\n"
    print_string "\n=========== Segmentation fault\n"
} ;

