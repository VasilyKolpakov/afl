# import lib.2s
# import array_list.2s
# import byte_vector.2s
# import switch_stmt.2s

constant "se_tracing_enabled_ptr" malloc 8 ;
write_mem_i64 se_tracing_enabled_ptr false ;

def "se_tracing" {
    if { read_mem_i64 se_tracing_enabled_ptr } { call } { drop }
} ;

def "se_enable_tracing" {
    write_mem_i64 se_tracing_enabled_ptr true
} ;

def "se_def_list" { 
    read_mem_i64 the_dictionary
} ;

# <record> -> <name>
def "se_dict_record_name" {
    read_mem_i64
} ;

# <record> -> <word_def>
def "se_dict_record_word_def" {
    read_mem_i64 + 8
} ;

# <record> -> <next>
def "se_dict_record_next" {
    read_mem_i64 + 16
} ;

# <word def> -> <address>
def "se_word_def_address" {
    read_mem_i64
} ;

# <word def> -> <is function>
def "se_word_def_is_function" {
    read_mem_i64 + 8
} ;

# <inst or pointer> -> <record>
def "se_find_record_by_instruction_or_pointer" {
    drop swap
    while { lazy_and { not = se_word_def_address se_dict_record_word_def 2dup } not = 0 dup } {
        se_dict_record_next
    } se_def_list 
} ;

# <name> -> <record>
def "se_find_record_by_name" {
    drop swap
    while { lazy_and { not string_equals se_dict_record_name 2dup } not = 0 dup } {
        se_dict_record_next
    } se_def_list 
} ;

def "se_print_instruction_switch" 
    when { = return_instruction_code dup } then { print_string "i_return" 2drop } otherwise
    when { = call_instruction_code dup } then {
        if { = 0 dup } {
            .
            print_string "anon func: "
            drop
        } {
            drop
            print_string se_dict_record_name
        }
        se_find_record_by_instruction_or_pointer dup
        read_mem_i64 + -8
        drop
        print_string "call: "
    } otherwise
    when { = lit_instruction_code dup } then {
        . read_mem_i64 + -8
        drop
        print_string "literal: "
    } otherwise
    when { = late_bind_instruction_code dup } then {
        print_string read_mem_i64 + 8 read_mem_i64 + -8
        drop
        print_string "unbound call: "
    } otherwise {
        drop
        if { = 0 dup } {
            print_newline
            print_string "unknown instruction"
            drop
        } {
            print_string se_dict_record_name
        }
        se_find_record_by_instruction_or_pointer
    }
;

# <instruction pointer> ->
def  "se_print_instruction" {
    se_print_instruction_switch
    # <inst code> <ip>
    read_mem_i64 dup
} ;

# stacks are represented as array_lists
# stacks layout
# [value stack ...][return stack ...][call stack][generated values count][recursive call index][recursion failure flag]
constant "se_stacks_struct_size" * 4 8

# <pointer> ->
def "se_stacks_new" {
    keep { se_stacks_set_recursive_failure_flag swap false }
    keep { se_stacks_set_recursive_call_index swap -1 }
    keep { se_stacks_set_gen_val_count swap 0 }
    keep { se_stacks_set_call_stack swap array_list_new }
    keep { se_stacks_set_return_stack swap array_list_new }
    keep { se_stacks_set_value_stack swap array_list_new }
    malloc se_stacks_struct_size
} ;

# <stacks> <value stack> ->
def "se_stacks_set_value_stack" {
    write_mem_i64
} ;

# <stacks> -> <value stack>
def "se_stacks_get_value_stack" {
    read_mem_i64
} ;

# <stacks> <return stack> ->
def "se_stacks_set_return_stack" {
    write_mem_i64 + 8
} ;

# <stacks> -> <return stack>
def "se_stacks_get_return_stack" {
    read_mem_i64 + 8
} ;

# <stacks> <return stack> ->
def "se_stacks_set_call_stack" {
    write_mem_i64 + 16
} ;

# <stacks> -> <return stack>
def "se_stacks_get_call_stack" {
    read_mem_i64 + 16
} ;

# <stacks> <count> ->
def "se_stacks_set_gen_val_count" {
    write_mem_i64 + 24
} ;

# <stacks> -> <count>
def "se_stacks_get_gen_val_count" {
    read_mem_i64 + 24
} ;

# <stacks> <count> ->
def "se_stacks_set_recursive_call_index" {
    write_mem_i64 + * 4 8
} ;

# <stacks> -> <count>
def "se_stacks_get_recursive_call_index" {
    read_mem_i64 + * 4 8
} ;

# <stacks> <count> ->
def "se_stacks_set_recursive_failure_flag" {
    write_mem_i64 + * 5 8
} ;

# <stacks> -> <count>
def "se_stacks_get_recursive_failure_flag" {
    read_mem_i64 + * 5 8
} ;

# <stacks> -> <size>
def "se_stacks_get_effective_value_stack_size" {
    - bi { array_list_get_size se_stacks_get_value_stack } { se_stacks_get_gen_val_count }
} ;

# <stacks> -> <value>
def "se_stacks_pop_from_value_stack" {
    if { = 0 array_list_get_size se_stacks_get_value_stack dup } {
        0
        bi { se_stacks_set_gen_val_count } { + 1 se_stacks_get_gen_val_count }
    } {
        array_list_pop_last se_stacks_get_value_stack
    }
} ;

# <stacks> ->
def "se_stacks_destroy" {
    free
    keep { array_list_destroy se_stacks_get_call_stack }
    keep { array_list_destroy se_stacks_get_return_stack }
    keep { array_list_destroy se_stacks_get_value_stack }
} ;

# <stacks> -> <stacks copy>
def "se_stacks_clone" {
    drop swap
    se_stacks_set_recursive_failure_flag dip { se_stacks_get_recursive_failure_flag } 2dup
    se_stacks_set_recursive_call_index dip { se_stacks_get_recursive_call_index } 2dup
    se_stacks_set_gen_val_count dip { se_stacks_get_gen_val_count } 2dup
    se_stacks_set_call_stack dip { array_list_clone se_stacks_get_call_stack } 2dup
    se_stacks_set_return_stack dip { array_list_clone se_stacks_get_return_stack } 2dup
    se_stacks_set_value_stack dip { array_list_clone se_stacks_get_value_stack } 2dup
    # <new stacks> <src stacks>
    malloc se_stacks_struct_size
} ;

def "se_stacks_print" {
    drop
    . se_stacks_get_recursive_call_index dup
    print_string "\nrecursive call index: "
    print_bool se_stacks_get_recursive_failure_flag dup
    print_string "\nrecursive failure flag: "
    . se_stacks_get_gen_val_count dup
    print_string "\ngen vals: "
    array_list_print se_stacks_get_call_stack dup
    print_string "\ncall stack: "
    array_list_print se_stacks_get_return_stack dup
    print_string "\nreturn stack: "
    array_list_print se_stacks_get_value_stack dup
    print_string "value stack: "
} ;

constant "se_tmp_stack" array_list_new ;
def "se_tmp_stack_push" { array_list_append se_tmp_stack } ;
def "se_tmp_stack_pop" { array_list_pop_last se_tmp_stack } ;
# <function> <pointer to instruction> -> <bool>
def "se_is_one_of_instructions" {
    dip { 2drop }
    while { lazy_and { not dup } not = return_instruction_code read_mem_i64 over } {
        dip { + -8 }
        se_equal_deref_values 2dup
        drop
    }
    false
} ;

# <pointer to i64> <pointer to i64> -> <is equal values>
def "se_equal_deref_values" {
    = bi* { read_mem_i64 } { read_mem_i64 }
} ;

# <call stack> -> <func name>
def "se_find_first_named_function_name_in_call_stack" {
    if { = -1 dup } {
        "'anon function'" 2drop
    } {
        se_dict_record_name se_find_record_by_instruction_or_pointer array_list_get swap
    }
    while { lazy_and { = 0 se_find_record_by_instruction_or_pointer array_list_get swap 2dup } <= 0 dup } {
        + -1
    }
    # <index> <list>
    + -1 array_list_get_size dup
} ;

# <func (list)> <func> -> <bool>
def "se_is_one_of_functions" {
    dip { 2drop }
    while { lazy_and { not dup } not = return_instruction_code read_mem_i64 over } {
        dip { + -8 }
        = read_mem_i64 2dup
        + -8
        assert "only calls" = call_instruction_code read_mem_i64 dup 
        drop
    }
    false
} ;

def "se_run_function_on_fake_stacks_unchecked_" {
    keep { drop array_list_pop_last se_stacks_get_call_stack } # restore call stack
    drop
    # <func end pointer> <stacks>
    se_tracing { dip {
        print_string "}\n" drop while { < 0 dup } { print_string "\t" + -1 } array_list_get_size se_stacks_get_call_stack dup
        if { se_stacks_get_recursive_failure_flag dup } { print_string "recursion failure\n" } { }
    } }
    while { lazy_and { not = return_instruction_code read_mem_i64 dup } not se_stacks_get_recursive_failure_flag over } {
        + -8
        # print stacks
        # dip { print_newline print_newline se_stacks_print dup }

        #SWITCH
        se_run_function_on_fake_stacks_instruction_switch
        se_tracing {
            print_newline
            se_print_instruction dup
            dip { drop while { < 0 dup } { print_string "\t" + -1 } array_list_get_size se_stacks_get_call_stack dup }
        }
        # <pointer to instruction> <stacks>
    }
    se_tracing {
        dip { print_string "{\n" drop while { < 0 dup } { print_string "\t" + -1 } array_list_get_size se_stacks_get_call_stack dup }
    }
    # print func name
    # dip { keep { print_newline print_string se_find_first_named_function_name_in_call_stack se_stacks_get_call_stack print_newline } }
    array_list_append se_stacks_get_call_stack swap 2dup # append current function to call stack
    # <func> <stacks>
} ;

# <func> <stacks> -> <stacks> # can return new stacks obj and destroy input stacks
def "se_run_function_on_fake_stacks_" {
    if { se_is_one_of_functions { if while bi bi* bi@ dip 2dip 3dip keep 2keep 3keep lazy_and lazy_or } dup } {
        se_run_function_on_fake_stacks_unchecked_
    } {
        if { = -1 se_stacks_get_recursive_call_index over } {
            keep { se_stacks_set_recursive_call_index swap -1 } # unset recursion mode
            se_tracing {
                keep { if { not = -1 se_stacks_get_recursive_call_index } { print_string "recursion mode: off\n" } { } }  
            }
            se_run_function_on_fake_stacks_unchecked_
            if { array_list_contains se_stacks_get_call_stack swap 2dup } {
                dip {
                    bi { se_stacks_set_recursive_call_index } { + -1 array_list_get_size se_stacks_get_call_stack } dup
                }
                se_tracing { print_string "recursion mode: on\n" }
            } { }
            # <func> <stacks>
        } {
            # check if there is a recursion after recursive_call_index (failure case)
            if { < bi { se_stacks_get_recursive_call_index } { array_list_last_index_of se_stacks_get_call_stack } } {
                se_stacks_set_recursive_failure_flag swap true dup
                drop
                se_tracing {
                    print_newline
                    . se_stacks_get_recursive_call_index over
                    print_string ", recursive call index: "
                    array_list_print se_stacks_get_call_stack over
                    print_string ", call stack: "
                    . dup
                    print_string "recursion failure: trying to run function: "
                }
            } {
                se_run_function_on_fake_stacks_unchecked_
            }
            # <stacks> <func> ...
            swap 2dup
        }
    }
} ;

# <ip> <stacks> -> <ip> <stacks>
def "se_run_function_on_fake_stacks_function_call_switch" 
    when { se_equal_deref_values + -8 { while } dup } then {
        dip {
            if { = -1 se_stacks_get_recursive_call_index dup } {
                se_stacks_destroy # destroy smallest stack (least amount of generated values)
                if { > bi@ { se_stacks_get_gen_val_count } 2dup } { swap } { } 

                assert "value stacks are not equal in 'while'" = bi@ { se_stacks_get_effective_value_stack_size } 2dup
#                        print_newline
#                        se_stacks_print
#                        print_newline
#                        se_stacks_print
#                        print_string "while check\n"
#                        2dup
                # <stacks> <stacks clone>
                dip {
                    keep { drop se_stacks_pop_from_value_stack } # drop cond result
                    se_run_function_on_fake_stacks_ swap # run cond
                    se_run_function_on_fake_stacks_ swap # run body
                }
                # <stacks> <stacks clone> <loop body> <loop cond>
                keep { se_stacks_clone }
                keep { drop se_stacks_pop_from_value_stack } # drop cond result
                se_run_function_on_fake_stacks_ swap dip { over } # run loop cond
                # <stacks> <loop body> <loop cond>
                keep { se_stacks_pop_from_value_stack }
                keep { se_stacks_pop_from_value_stack }
            } {
#                        print_newline
#                        se_stacks_print
#                        print_string "while rec check\n"
#                        dup
                # run only loop cond
                keep { drop se_stacks_pop_from_value_stack } # drop cond result
                se_run_function_on_fake_stacks_ swap # run loop cond
                # <stacks> <loop cond>
                keep { drop se_stacks_pop_from_value_stack }
                keep { se_stacks_pop_from_value_stack }
            }
        }
    } otherwise
    when { se_equal_deref_values + -8 { if } dup } then {
        dip {
            if { = -1 se_stacks_get_recursive_call_index dup } {
                se_stacks_destroy # destroy the smallest stack (least amount of generated values)
                if { > bi@ { se_stacks_get_gen_val_count } 2dup } { swap } { } 

                if { not = bi@ { se_stacks_get_effective_value_stack_size } 2dup } {
                    exit 1
                    print_newline
                    keep { print_newline print_string se_find_first_named_function_name_in_call_stack se_stacks_get_call_stack print_newline }
                    print_string "\nvalue stacks are not equal in 'if' in "
                    print_newline
                    se_stacks_print
                    print_newline
                    se_stacks_print
                    2dup
                } { }
#                            print_newline
#                            se_stacks_print
#                            print_newline
#                            se_stacks_print
#                            print_string "if check\n"
#                            2dup
                se_run_function_on_fake_stacks_ swap # run then func
                # <stacks> <then func> <stacks copy>
                dip {
                    swap
                    se_run_function_on_fake_stacks_ swap # run else func
                }
                # <stacks> <stacks copy> <else func> <then func>
                keep { se_stacks_clone }
                # <stacks> <else func> <then func>
                keep { drop se_stacks_pop_from_value_stack } # drop cond result
                se_run_function_on_fake_stacks_ swap # run cond
                # <stacks> <if cond> <else func> <then func>
                dip { rot }
                # <stacks> <else func> <then func> <if cond>
                keep { se_stacks_pop_from_value_stack }
                keep { se_stacks_pop_from_value_stack }
                keep { se_stacks_pop_from_value_stack }
            } {
                if { se_stacks_get_recursive_failure_flag dup } {
#                            print_newline
#                            se_stacks_print
#                            print_string "if rec check else func\n"
#                            dup
                    se_run_function_on_fake_stacks_ swap
#                            print_newline
#                            se_stacks_print
#                            print_string "if rec check else func before\n"
#                            dup
                    se_stacks_destroy
                } {
                    dip { drop se_stacks_destroy }
                }

#                        print_newline
#                        se_stacks_print
#                        print_string "if rec check then func\n"
#                        dup
                se_run_function_on_fake_stacks_ swap
#                        print_newline
#                        se_stacks_print
#                        print_string "if rec check before then func\n"
#                        dup
                # <stacks> <then func> <stacks copy> <else func>
                dip { swap }
                # <stacks> <stacks copy> <then func> <else func>
                keep { se_stacks_clone }
                keep { drop se_stacks_pop_from_value_stack } # drop cond result
                se_run_function_on_fake_stacks_ swap
                # <stacks> <if cond> <then func> <else func>
                keep { -rot se_stacks_pop_from_value_stack }
                # <stacks> <if cond> <then func>
                keep { swap se_stacks_pop_from_value_stack }
                keep { se_stacks_pop_from_value_stack }
            }
        }
    } otherwise
    when { se_equal_deref_values + -8 { stacktrace_print_return_stack_except_n_slots } dup } then {
        dip {
            keep { drop se_stacks_pop_from_value_stack }
        }
    } otherwise
    when { se_equal_deref_values + -8 { . } dup } then {
        dip {
            keep { drop se_stacks_pop_from_value_stack }
        }
    } otherwise
    when { se_equal_deref_values + -8 { print_string } dup } then {
        dip {
            keep { drop se_stacks_pop_from_value_stack }
        }
    } otherwise
    when { se_equal_deref_values + -8 { def } dup } then {
        dip {
            keep { drop se_stacks_pop_from_value_stack }
            keep { drop se_stacks_pop_from_value_stack }
        }
    } otherwise
    when { se_equal_deref_values + -8 { .s } dup } then { } otherwise
    when { se_equal_deref_values + -8 { print_newline } dup } then { } otherwise
    {
        keep { se_run_function_on_fake_stacks_ read_mem_i64 } # <pointer to funciton> <stacks> ...
    }
;

# <ip> <stacks> -> <ip> <stacks>
def "se_run_function_on_fake_stacks_instruction_switch"
    # binary ops
    when { se_is_one_of_instructions { + * - / % and or bit_lshift bit_rshift bit_xor bit_or bit_and = > >= < <= } dup } then {
        dip {
            keep { array_list_append swap 1 se_stacks_get_value_stack }
            keep { drop se_stacks_pop_from_value_stack }
            keep { drop se_stacks_pop_from_value_stack }
        }
    } otherwise
    # binary ops with overflow check
    when { se_is_one_of_instructions { checked_add checked_mul } dup } then {
        dip {
            keep { array_list_append swap 1 se_stacks_get_value_stack }
            keep { array_list_append swap 1 se_stacks_get_value_stack }
            keep { drop se_stacks_pop_from_value_stack }
            keep { drop se_stacks_pop_from_value_stack }
        }
    } otherwise
    when { se_equal_deref_values { syscall } dup } then {
        dip {
            keep { array_list_append swap 1 se_stacks_get_value_stack }
            keep { drop se_stacks_pop_from_value_stack }
            keep { drop se_stacks_pop_from_value_stack }
            keep { drop se_stacks_pop_from_value_stack }
            keep { drop se_stacks_pop_from_value_stack }
            keep { drop se_stacks_pop_from_value_stack }
            keep { drop se_stacks_pop_from_value_stack }
            keep { drop se_stacks_pop_from_value_stack }
        }
    } otherwise
    when { se_is_one_of_instructions { return_stack_depth argv argc } dup } then {
        dip {
            keep { array_list_append swap 1 se_stacks_get_value_stack }
        }
    } otherwise
    when { se_is_one_of_instructions { write_mem_byte write_mem_i64 } dup } then {
        dip {
            keep { drop se_stacks_pop_from_value_stack }
            keep { drop se_stacks_pop_from_value_stack }
        }
    } otherwise
    when { se_is_one_of_instructions { read_mem_byte read_mem_i64 not } dup } then {
        dip {
            keep { array_list_append swap 1 se_stacks_get_value_stack }
            keep { drop se_stacks_pop_from_value_stack }
        }
    } otherwise
    when { se_equal_deref_values { drop } dup } then {
        dip {
            keep { drop se_stacks_pop_from_value_stack }
        }
    } otherwise
    when { se_equal_deref_values { swap } dup } then {
        dip {
            keep { array_list_append se_stacks_get_value_stack }
            keep { array_list_append se_stacks_get_value_stack }
            dip { swap }
            keep { se_stacks_pop_from_value_stack }
            keep { se_stacks_pop_from_value_stack }
        }
    } otherwise
    when { se_equal_deref_values { rot } dup } then {
        dip {
            keep { array_list_append se_stacks_get_value_stack }
            keep { array_list_append se_stacks_get_value_stack }
            keep { array_list_append se_stacks_get_value_stack }
            dip { -rot } 
            # <stacks> <c> <b> <a> # value stack : <a> <b> <c>
            keep { se_stacks_pop_from_value_stack }
            keep { se_stacks_pop_from_value_stack }
            keep { se_stacks_pop_from_value_stack }
        }
    } otherwise
    when { se_equal_deref_values { -rot } dup } then {
        dip {
            keep { array_list_append se_stacks_get_value_stack }
            keep { array_list_append se_stacks_get_value_stack }
            keep { array_list_append se_stacks_get_value_stack }
            dip { rot } 
            # <stacks> <c> <b> <a> # value stack : <a> <b> <c>
            keep { se_stacks_pop_from_value_stack }
            keep { se_stacks_pop_from_value_stack }
            keep { se_stacks_pop_from_value_stack }
        }
    } otherwise
    when { se_equal_deref_values { dup } dup } then {
        dip {
            keep { array_list_append se_stacks_get_value_stack }
            keep { array_list_append se_stacks_get_value_stack }
            keep { dup se_stacks_pop_from_value_stack }
        }
    } otherwise
    when { se_equal_deref_values { over } dup } then {
        dip {
            keep { array_list_append se_stacks_get_value_stack }
            keep { array_list_append se_stacks_get_value_stack }
            keep { array_list_append se_stacks_get_value_stack }
            dip { -rot dup }
            # <stacks> <b> <a> # value stack : <a> <b>
            keep { se_stacks_pop_from_value_stack }
            keep { se_stacks_pop_from_value_stack }
        }
    } otherwise
    when { se_equal_deref_values { 2dup } dup } then {
        dip {
            keep { array_list_append se_stacks_get_value_stack }
            keep { array_list_append se_stacks_get_value_stack }
            keep { array_list_append se_stacks_get_value_stack }
            keep { array_list_append se_stacks_get_value_stack }
            dip { 2dup }
            keep { se_stacks_pop_from_value_stack }
            keep { se_stacks_pop_from_value_stack }
        }
    } otherwise
    when { se_equal_deref_values { r> } dup } then {
        dip {
            keep { array_list_append se_stacks_get_value_stack }
            keep { array_list_pop_last se_stacks_get_return_stack }
        }
    } otherwise
    when { se_equal_deref_values { >r } dup } then {
        dip {
            keep { array_list_append se_stacks_get_return_stack }
            keep { se_stacks_pop_from_value_stack }
        }
    } otherwise
    when { se_equal_deref_values { r@ } dup } then {
        dip {
            keep { array_list_append se_stacks_get_value_stack }
            keep { array_list_get_last se_stacks_get_return_stack }
        }
    } otherwise
    when { se_equal_deref_values { r_pick } dup } then {
        dip {
            keep { array_list_append se_stacks_get_value_stack }
            keep { array_list_get se_stacks_get_return_stack } # <stacks> <ret stack index>
            keep { - array_list_get_size se_stacks_get_return_stack } # <stacks> <value>
            keep { se_stacks_pop_from_value_stack }
        }
    } otherwise
    when { se_equal_deref_values { pick } dup } then {
        dip {
            keep { array_list_append se_stacks_get_value_stack }
            keep { array_list_get se_stacks_get_value_stack } # <stacks> <val stack index>
            keep { - array_list_get_size se_stacks_get_value_stack } # <stacks> <value>
            keep {
                2drop
                while { < 0 over } {
                    dip { + -1 }
                    array_list_append dip { se_tmp_stack_pop } se_stacks_get_value_stack dup
                } 
                dip { dup }
                drop swap
                while { < 0 over } {
                    dip { + -1 }
                    se_tmp_stack_push se_stacks_pop_from_value_stack dup
                } 
                dip { dup }
                # <stacks> <index>
            }
            keep { se_stacks_pop_from_value_stack }
        }
    } otherwise
    when { se_equal_deref_values { call } dup } then {
        dip {
            se_run_function_on_fake_stacks_ swap
            keep { se_stacks_pop_from_value_stack }
        }
    } otherwise
    when { se_equal_deref_values { late_bind_and_call_word } dup } then {
        dip {
            se_run_function_on_fake_stacks_
            se_word_def_address se_dict_record_word_def
            if { = 0 dup } {
                exit 1
                dip { print_string }
                print_string "se_run_func: bad_word: "
            } {
                dip { drop }
            }
            se_find_record_by_name dup read_mem_i64 + 8
            # <struct <dict> <name>> <stacks>
        }
        keep { read_mem_i64 }
        + -8
    } otherwise
    when { se_equal_deref_values { 0 } dup } then {
        array_list_append se_stacks_get_value_stack swap read_mem_i64
        2dup
        + -8
        # <instruction pointer> <stacks>
    } otherwise
    when { se_equal_deref_values { if } dup } then { # function call
        se_run_function_on_fake_stacks_function_call_switch
        + -8
    } otherwise
    { exit 1 print_newline print_string se_dict_record_name se_find_record_by_instruction_or_pointer print_string " " . dup read_mem_i64 dup print_string "unsupported instruction: " }
;

# <func> ->
def "se_check_function_and_print_stack_effect_" {
    print_newline
    se_stacks_destroy
    if { se_stacks_get_recursive_failure_flag dup } {
        print_string "recursion resolution failed"
    } {
        keep { . array_list_get_size se_stacks_get_value_stack } # <stacks>
        print_string " -> "
        keep { . se_stacks_get_gen_val_count } # <stacks>
    }
    se_run_function_on_fake_stacks_ swap # <stacks> <func>
    se_stacks_new
    # <func>
} ;

#def "se_check_last_defined_function_" {
constant "se_enabled_ptr" malloc 8 ;
def "se_is_enabled" { read_mem_i64 se_enabled_ptr } ;
def "se_enable" { write_mem_i64 se_enabled_ptr true } ;
def "se_disable" { write_mem_i64 se_enabled_ptr false } ;
se_disable ;

def "se_check_last_defined_function" {
    if { se_is_enabled } {
        se_check_function_and_print_stack_effect_
            se_word_def_address se_dict_record_word_def se_def_list

        print_string "': "
        print_string se_dict_record_name se_def_list
        print_string "function '"
    } { }
} ;

# <string> ->
def "se_check_function_by_name" {
    if { se_is_enabled } {
        se_check_function_and_print_stack_effect_
            se_word_def_address se_dict_record_word_def
        se_find_record_by_name
        print_string "': "
        print_string dup
        print_string "function '"
    } { drop }
} ;

#print_newline .  se_find_record_by_instruction_or_pointer read_mem_i64 4199908 ;

#def "test" {
#} ;
##se_enable_tracing ;
#se_enable ;
#se_check_last_defined_function ;
##
#exit 0 ;
