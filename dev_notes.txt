!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!! TIME TRACKING !!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Архитектура
  - Минимальное ядро - писать на ассемблере как можно меньше, парсер тоже на форте надо написать
  - интерпретатор выполняет Read-Eval-Loop
  - инструкции идут в обратном порядке чтобы можно было писать на "форте" в ассемблере

План
    + написать интерпретатор, threaded code
    + заменить инструкции exit и write_buffer на syscall и функции
    + добавить проверку на overflow и underflow для обоих стеков
    + заменить i_rjmp на обычный i_jmp
    + parse i64 (a 1 hour 10 min)
        + '=', '+', '-', '<', '>'
        + and
        + while (prediction 30 min, actual 3 hours)
            + jmp_if (prediction 10 min, actual 15 min) - BUG!
        + dup-n (actual 10 min)
    + byte_array ()
        + malloc/free (p 10-20 min, actual 50 min, I thought that malloc was implemented)
            + i_rot, i_rev_rot
        + simple error logging for syscalls (p 5 min, a 30 min)
        + byte_array (p 1 hour, a 1 hour 20 min)
            + make_byte_array (~ 5 min)
                + check args
            + byte_array_pointer (~ 2 min)
            + byte_array_size (~ 3 min)
            + byte_array_get (~ 15 min )
                + i_read_mem_byte (a 7 min)
                + range check, panic
                    + i_2dup
                + i_or
            + byte_array_set (~5 min)
                + i_write_mem_byte
                + range check, panic
            + write_byte_array_to_std (~ 5 min)
            + test (~15 min)
    + print i64 (p 50 min, a 1 hour 40 min)
        + i64_str_size (p 20 min, a 40 min)
            + i_div
            + i_mod
        + write_i64_to_buffer (p 30 min, a 1 hour)
            + i_over
            + check size (p 8 min)
            + print minus (p 3 min)
            + print digits (negate number if positive) (p 15 min)
    + print_number funciton (p 5 min, a 7 min)
    + print stack (30 min, a 25 min)
        + i_stack_depth (5 min, 8 min #idiv problem, it doesn't support immediate values)
        + function (15 min, a 16 min)
            + print_byte
    + lexer
        + design sketch #1 (p 20 min, a 30)
        # splits input into tokens (token_type - string pairs)
        # reads one token per call !!!!
        # returns token type and string
        # save line and column numbers for error reporting?
        > tokens
            # whitespace is delimiter except in string literals
            > ';'
            > '}'
            > '{'
            > string literal
                # escape sequences ('\n', '\t')
                # string literal cannot be on multiple lines
            > number literal
            > word
                # "2dup" word is allowed
            > error?
                # bad string literals?
        + growable byte buffer
            + realloc (p 20 min, a 25)
            + rewrite byte buffer (p 45 min, a 1 hour 30 min)
                # size
                # capacity
                # pointer
                + make (p 10 min, a 9 min)
                + size  (p 5 min, a 2 min)
                + set  (p 5 min, a 4 min)
                --- ensure_capacity (p 10 min) 5 min + 10 min
                    #scratch this
                + append  (p 10 min, 23 min)
                + pointer (p 3 min, a 3 min)
                + destroy (p 8 min, a 4 min)
                + test & debug    (p 8 min, a 25 min)
                    + make fix (9 min)
            -? grow <n> # returns pointer to the new slice
        + scanner # 1 byte lookahead scanner (p 20, a 13 min)
            # keep the byte on stack ?
            # interpreter state ?
            # closures, function generation, append_function_args?
            # just keep it on the heap !
            + scanner_make (p 5)
                # allocates memory and reads first byte
            + scanner_peek (p 10)
                # returns cached value
            + scanner_advance (p 5)
                # reads stdin
        + next_token
            # parses next token and returns <byte vector>
            + next_token_number_or_word
            + skip_whitespace (p 15 min, a 15 min)
                # skips ' ', '\t', '\n', '\r'
            + test / token printer (p 10 min, a 11 min)
            + skip_comment (p 10 min, a 25 min)
                - skip_comments_and_whitespace
            + rewrite next_token (p 15 min, a 2 min)
            + string literal handling in next_token (p 20 min, a 28 min)
        - token types
            # 0 number
            # 1 string literal
            # 2 word
            # 3 {
            # 4 }
            # 5 ;
            + is_number_token
                + memcmp a_addr, b_addr, n (a ~30 min)
            + cond
            + is_string_literal_token
            + better token echo
            + is_string_literal_token
            + string_literal_to_string
            + is_bad_string_literal_token
            + is_semicolon_token
            - is_open_paren_token
            - is_close_paren_token
    + test byte vector on large strings (p 10 min, a 10 min)
    + fix byte vector on large strings (p 30 min, a 29 min)
    + interpreter
        + non-quote interpreter
            # emit tail call into f_interpret
            # emit <dictionary pointer>, i_push_to_stack
            # ??? emit <current function>, i_push_to_stack
            # read tokens, if token is a word, then find word in dict and emit <function pointer>, i_call code
            # if token is a number, then emit <number>, i_push_to_stack code
            # if token is a semicolon, then jump to the last emitted instruction
            + byte_vector_append_i64
            + dictionary
                # <word name vector> <word code vector> <next>
                + dictionary_make
                    # allocates 8 bytes of memory and sets it to 0
                + dictionary_make_record <name vector> <code vector> <next>
                    # allocates 8*3 bytes of memory <word name vector> <word code vector> <next>
                + dictionary_record_name <record> -> <name vector>
                + dictionary_record_code <record> -> <code vector>
                + dictionary_record_next <record> -> <next>
                + byte_vector_equals <vector> <vector> -> <bool>
                + dictionary_find_record <first record pointer> <name vector> -> <record pointer or 0>
                    # if { = 0 dup } { drop swap } { if { vector_equals record_name 2dup } { drop swap } { dictionary_find_record dictionary_record_next } }
                + dictionary_add <dict> <name vector> <code vector>
                    # tries to find a record with the name
                    # panics is name is already taken
                    # adds new record to the front of the list
    + vim custom highlighting
    + constant
    + allocator
        # O(1) power-of-twos
        # 9 fixed size block allocators for req_size < page_size / 2 - 8, full page allocations for the rest
        # block size is equal to the closest power of 2 if requested size is less or equal to 128,
        # minimal block size is 8 bytes
        # block size is equal to round_to_power_of_two(req_size) - 8 if req_size > 128 to avoid overhead 
        # malloc and realloc return actual size and pointer to the block

        # block allocator pages 
            # page header: allocator_pointer i64
            # page header: allocation bitset (to prevent double free)
            # free block header: next_block_pointer: i64
        # non-block allocations have a 8-byte headers that contain allocation size
        # block allocators array
            # allocator: block_size:i64, pointer_to_freelist: i64, pointer_to_last_page: i64, next_unalloc_space: i64
        # free block header: next_block: i64
        + round_up_to_power_of_two
            + i_bit_rshift_i64
            + i_bit_or_64
            + tests in 2s
        + bitset ( planning 9 min, p 1 hour 5 min, 1 hour 30 min)
            + bit_lshift_i64 ( p 15 min, a 12 min )
            + bitset_size <size> -> <byte size> (p 15, bad planning\design, 5 m redesign, 23 min)
            + bitset_add <address> <n> (p 15, a 28 min)
            + bitset_remove <address> <n> (p 15 min, a 10 min)
                + bit_xor_64
            + bitset_contains <address> <n> -> <bool> (p20 min, a 6 min)
                + bit_and_64
            + test
        + block allocator (planning 55 min, p 1 hour 35 min, 3 hour 10 min without debugging)
            + block_allocator_page_init <page> <allocator> -> (p 20 min, a 34 min)
                #i planning failure - no need for page_header.used_block_count
                # set block_size
                # memzero the bitset - no need
                + memzero (p 15 min, a 20 min)
            + block_allocator_init <address> <block size> # takes 24 bytes (p 30 min, a 1 hour 5 min)
                # allocate new page, init page, init page pointers --- block_allocator_alloc_new_page
                # set pointer_to_freelist to 0
                + block_allocator_alloc_new_page <allocator address> (p 25 min, a 55 min)
                    # allocate fresh page
                    # init page
                    # set pointer_to_last_page
                    # set next_unalloc_space to 8 + align(bitset_size)
                    + align_mem_size <size in bytes> -> <aligned size in bytes>
            + block_allocator_allocate <allocator address> -> <block address> (p 30 min, a 1 hour)
                # check pointer_to_freelist, if it is not 0, then pop one block from the list 
                # if the pointer is not 0, then set it to free_block.next_block and return the first pointer
                # if the pointer is 0, then check next_unalloc_space + block_size <= page_pointer + page_size
                # if true, then return next_unalloc_space and increment next_unalloc_space by block_size
                # if false, then allocate new page, init it, update pointer_to_last_page and next_unalloc_space and do the true branch
                # update the bitset
                - block_allocator_update_bitset <block address> <bool> (p 10 min)
                - block_allocator_alloc_next_fresh_block <allocator address> -> <block pointer> (p 10 min)
            + block_allocator_free <block address> -> <success bool (not double free)> (p 15 min, a 30 min)
                # get allocator pointer from page header
                # check bitset, if not allocated return false
                # set next_block to pointer_to_freelist, set pointer_to_freelist to the block
                # update the bitset
                # return true
            + tests
                # basic test
                    # allocate array of N cells (8 bytes), zero all cells
                    # iterate
                        # generate a random number R between 0 and N-1
                        # if array[R] is 0 then allocate a block and write R to every cell in the block
                        # if array[R] is not 0 then free array[R]
                        # after each iteration check all blocks
                # free space test
                - basic test (planning 40 min, p 1 hour, a 1 hour+)
                    + r@ (10 min)
                    + vim syntax (20 min)
                    + RNG (p 30 min, a 29 min)
            
        + malloc
        + free
        + realloc
            + memcopy
        + test
    + primitive import system in bash (a 1 hour)
    + memset tests
    + fail-fast on bad words
    + signal handler
        + stacktrace (p 35 min, a 2 hours 30 min)
            + list all function names (p 5 min, a 8 min)
            + list names, addresses and lengths (p 15 min, a 30 min)
            + find_func_name_by_i_pointer (p 10 min, a 57 min)
            + ret_stack_depth (p 5 min)
            + stacktrace (p 10 min, a 35 min)
    + guard pages
    + fix guard pages
        + free in large block allocator
        + realloc in large block allocator
    + realloc test with mem checks
    + recursion
    + skip list
    + array list
    + stack effect inference for programs without recursive functions
    + make stack effect checker usable
        + show function name on inconsistency error
        + print stack effect (in count, out count)
            + pick max used vals 
    - rewrite the interpreter in 2s
        + byte_vector
        - buffered stdin
        - typed IR (functions, strings)
        - modules
    - RPN
    - type inference
        # type stack
    - non-optimising bytecode compiler
        - assembly target
    - non-optimising native compiler
        - template-based
        - assembly target
    - optimising native compiler
        - SSA
        - coloring
        - assembly target
        - x86 target

API:
    - malloc n
        # Allocates n + 8 bytes internally. Saves size in the first 8
        # bytes. Returns addr + 8.
    - free a
        # Reads size from addr - 8. Deallocates memory addr - 8.
    - make_byte_array n
        # allocates a byte array. returns pointer to the array
        # array memory layout: [<size i64> <byte>...]

not unrgent, maybe important:
  - i_peek_ret_stack: check for non-positive arg


Misc.:

'if' function is terrible

Problems:

- "/", "%", "-" arg order, often needs a swap (debugging: + 7 min)

ideas:

- checkpointing
    - "COW", all references are replaced with handles, every check is an array of all handles
- profiler
- debugger
- rewrite def function in 2s for better error logging
- fix sig handler: call sigreturn
- b+tree
- pretty-printing code: optimized SSA; arg and return value names (define words with names?)
- siginfo contains address that caused segfault
- jit-optimize every n-th run instruction
- gap buffer for console editor
- "exec" and "test by" headers
- dynamic type-checking "mode", recompile all dictionary entries to ph
- implement isatty for terminal support
- struct macro: def_struct [ "first_field" , "second_field" ... ]
- indent-dependent syntax based on stack depth, i.e. same depth => same indent
- cond functions are possible in static typing (cond1, cond2, cond3 ...)
- named type args
- compile to wasm
- types: (number, bool)
- test harness in 2s (instead of bash)
- literal arrays with commas
- recursive descent for parser and lexer?
- look at how c works with signal handlers
- named stack vars, print stack states for functions
- stack allocation, frame pointer
- function pointer indirection for JIT
- оставлять тексты определение функций в словаре для late-binding
- tail-call optimisation
  - все функции линейные, нет control flow
- interpreter state pointer
!- function suggestion by type, через алгоритм Дейкстры
- boxed types
- sigsegv handler for stack guard
- set_type function

