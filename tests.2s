# import lib.2s
# import allocator.2s

# <string> ->
def "print_bash_escape_seq" {
    print_string
    write_byte_to_stdout 27
} ;

# <string> ->
def "print_green_string" {
    print_bash_escape_seq "[0m"
    print_string
    print_bash_escape_seq "[0;32m"
} ;

# <string> ->
def "print_red_string" {
    print_bash_escape_seq "[0m"
    print_string
    print_bash_escape_seq "[0;31m"
} ;

# <test name> <test body> ->
def "run_test" {
   if { call } { print_green_string "OK\n" } { print_red_string "FAIL\n" }
   print_string ": "
   print_string
} ;


run_test "bit rshift" {
    and = 
        1
        bit_rshift 2 1
    and = 
        8
        bit_rshift 16 1
    and = 
        + 4 8
        bit_rshift + 16 32 2

        true
} ;

run_test "bit lshift" {
    and = 
        4
        bit_lshift 2 1
    and = 
        32
        bit_lshift 16 1
    and = 
        + 16 32
        bit_lshift + 4 8 2

        true
} ;

run_test "bit xor" {
    and = 
        3
        bit_xor 2 1
    and = 
        0
        bit_xor 3 3

        true
} ;

run_test "bit or" {
    and = 
        3
        bit_or 2 1
    and = 
        3
        bit_or 3 1

        true
} ;

run_test "bit and" {
    and = 
        4
        bit_and 7 4
    and = 
        1
        bit_and 3 1

        true
} ;

run_test "round_up_to_power_of_two" {
    and = 
        4
        round_up_to_power_of_two 3
    and = 
        0
        round_up_to_power_of_two 0
    and = 
        1
        round_up_to_power_of_two 1
    and = 
        128
        round_up_to_power_of_two 100

        true
} ;

run_test "bitset size" {
    and = 
        0
        bitset_size 0
    and =
        1
        bitset_size 4
    and =
        10
        bitset_size 75
    true
} ;

run_test "bitset operations" {
    drop syscall_munmap r> 4096
        and
            not bitset_contains r@ 0
            bitset_remove r@ 0
            bitset_add r@ 0
        and
            bitset_contains r@ 10
            bitset_add r@ 10
        and
            bitset_contains r@ 8
            bitset_add r@ 8
            bitset_remove r@ 0
        and
            bitset_contains r@ 0
            bitset_add r@ 0
        and
            not bitset_contains r@ 100
        true
    >r syscall_mmap_anon 4096
} ;

run_test "memzero" {
    drop syscall_munmap r> 4096
        and
            =
                0
                read_mem_byte + 10 r@
            memzero r@ 100
            write_mem_byte + 10 r@ 1
        and
            and
                =
                    0
                    read_mem_byte r@
                =
                    1
                    read_mem_byte + 100 r@
            memzero r@ 100
            write_mem_byte + 100 r@ 1
            write_mem_byte r@ 1
        and =
            1
            read_mem_byte r@
            write_mem_byte r@ 1
        true
    >r syscall_mmap_anon 4096
} ;


run_test "align_mem_size" {
    and = 
        0
        align_mem_size 0
    and = 
        8
        align_mem_size 1
    and = 
        16 
        align_mem_size 10
    true
} ;


run_test "memset" {
    drop syscall_munmap r> 4096
    and =
        42
        read_mem_byte + 99 r@
    and =
        0
        read_mem_byte + 100 r@
    and =
        42
        read_mem_byte r@
    true
    memset r@ 42 100
    >r syscall_mmap_anon 4096
} ;

run_test "realloc" {
    free r>
    and =
        42
        read_mem_byte + 99 r@
    and =
        0
        read_mem_byte + 100 r@
    and =
        42
        read_mem_byte r@
    >r realloc swap 500 r>
    memset r@ 42 100
    >r malloc 100

    free r>
    and =
        42
        read_mem_byte + 99 r@
    and =
        0
        read_mem_byte + 100 r@
    and =
        42
        read_mem_byte r@
    >r realloc swap 5000 r>
    memset r@ 42 100
    >r malloc 10000

    free r>
    and =
        42
        read_mem_byte + 99 r@
    and =
        0
        read_mem_byte + 100 r@
    and =
        42
        read_mem_byte r@
    >r realloc swap 15000 r>
    memset r@ 42 100
    >r malloc 5000
    true
} ;



.s ;

exit 0 ;
