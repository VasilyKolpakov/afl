# import lib.2s
# import block_allocator.2s

constant "allocator_array" syscall_mmap_anon 4096 ;

block_allocator_set_block_size swap -1
+ block_allocator_instance_size
block_allocator_init over - 2048 8
+ block_allocator_instance_size
block_allocator_init over - 1024 8
+ block_allocator_instance_size
block_allocator_init over - 512 8
+ block_allocator_instance_size
block_allocator_init over - 256 8
+ block_allocator_instance_size
block_allocator_init over 128
+ block_allocator_instance_size
block_allocator_init over 64
+ block_allocator_instance_size
block_allocator_init over 32
+ block_allocator_instance_size
block_allocator_init over 16
+ block_allocator_instance_size
block_allocator_init over 8
allocator_array ;

constant "allocator_stats" syscall_mmap_anon 4096 ;

# -> <number>
def "allocator_get_current_bytes_allocated" {
    read_mem_i64 allocator_stats
} ;

# <number> ->
def "allocator_set_current_bytes_allocated" {
    write_mem_i64 allocator_stats
} ;

# <number> ->
def "allocator_increment_current_bytes_allocated" {
    allocator_set_current_bytes_allocated + allocator_get_current_bytes_allocated
} ;

# <number> ->
def "allocator_decrement_current_bytes_allocated" {
    allocator_set_current_bytes_allocated - allocator_get_current_bytes_allocated
} ;

# <size> -> <aligned size>
def "allocator_align_to_page_size" {
    * 4096 + 1 / swap 4096 + -1
} ;

# <min size> -> <actual size> <addr>
def "allocator_alloc_large_block" {
    #debug "large block alloc return"
    + -16 swap
    + 16
    write_mem_i64 + 8 2dup # <addr> <aligned size> save size
    write_mem_i64 swap -1 dup # <addr> <aligned size> mark page header to make it distinguishable from block_allocator's blocks
    #debug "large block alloc after mmap"
    # guard page goes after data pages
    drop panic_on_syscall_error syscall_mprotect rot 4096 syscall_mmap_PROT_NONE + 2dup # init guard page <new mem pointer> <aligned size> 
    panic_on_syscall_error syscall_mmap_anon + 4096 dup # alloc requested size + guard page <aligned size>
    allocator_align_to_page_size + 16
    #debug "large block start"
} ;

# <addr> -> <bool>
def "allocator_free_large_block" {
    if { = 16 % swap 4096 dup } {
        if { = -1 read_mem_i64 dup } {
            = 0 # syscall error code
            syscall_munmap swap + 4096 # unmap data and the guard page # <size> <addr (header)>
            read_mem_i64 + 8 dup # <addr (header)>
        } {
            false drop # bad page header
        }
        + -16
    } {
        false drop # bad page offset
    }
} ;

# <addr> <new size> -> <bool> <actual size> <addr>
def "allocator_realloc_large_block" {
    if { = 16 % swap 4096 dup } {
        if { = -1 read_mem_i64 dup } {
            < 0 over # <actual size> <addr> syscall error code check
            swap + 16 swap
            + -16 allocator_align_to_page_size swap # <new addr> <new size>
            write_mem_i64 + 8 2dup # save new size <new addr> <new size>
            drop panic_on_syscall_error syscall_mprotect rot 4096 syscall_mmap_PROT_NONE + 2dup # <new addr> <new size>
            panic_on_syscall_error
            syscall_mremap_maymove swap # <old size> <addr (header)> <new size + guard page size> <new size>
            -rot + 4096 rot # <old size> <addr (header)> <new size> <new size>
            drop panic_on_syscall_error syscall_munmap swap 4096 + 2dup # unmap guard page <old size> <addr (header)> <new size> <new size>
            read_mem_i64 + 8 dup # <addr (header)> <new size> <new size>
            if { not = 0 % swap 4096 dup } { exit 1 print_string "bad address" } { }
        } {
            false drop # bad page header
        }
        + -16
    } {
        false drop # bad page offset
    }
    rot dup allocator_align_to_page_size + 16 swap
} ;

# <addr> -> <size>
def "allocator_get_actual_size" {
    if { = -1 dup } {
        + -16 read_mem_i64 + -8 drop # <-1> <addr>
    } {
        block_allocator_get_block_size drop swap # <blk alloc> <addr>
    }
    block_allocator_get_allocator_for_block dup
} ;

# <min size> -> <actual size> <addr>
def "malloc_actual_size" {
    allocator_increment_current_bytes_allocated dup
    if { not = -1  block_allocator_get_block_size dup } {
        block_allocator_get_block_size swap # <block> <allocator>
        block_allocator_allocate dup # <allocator>
        drop swap
    } {
        allocator_alloc_large_block drop # <null allocator> <min size>
    }
    while { 
        and 
            not = -1 block_allocator_get_block_size over
            <= block_allocator_get_block_size 2dup
    } {
        + block_allocator_instance_size
    } # <allocator array> <min size>
    allocator_array 
} ;

# <addr> -> <bool>
def "free_checked" {
    if { = -1 dup } {
        allocator_free_large_block drop # <-1> <addr>
    } {
        if {
            and
                <= allocator_array swap # <bool> <allocator> <addr>
                >= + * 8 block_allocator_instance_size allocator_array dup # <allocator> <addr> 
        } {
            #debug "free after block_allocator_free"
            block_allocator_free # <addr>
            #debug "free before block_allocator_free"
        } { false drop } # bad allocator address
    } # <allocator> <addr>
    #debug "free after get_allocator"
    block_allocator_get_allocator_for_block dup
    allocator_decrement_current_bytes_allocated allocator_get_actual_size dup
} ;

# <addr> <new size> -> <actual size> <addr>
def "realloc_actual_size" {
    allocator_increment_current_bytes_allocated dup
    if { not } { exit 1 print_string "unable to realloc memory" } { }
    if { = -1 dup } {
        allocator_realloc_large_block drop # <-1> <addr> <new size>
    } {
        #debug "after_block_alloc_free"
        rot swap -rot # <bool> <new addr> <new actual size>
        block_allocator_free r> # <new addr> <new actual size>
        memcopy swap r@ swap # <new addr> <min size> <new addr> <new actual size>
        over swap r> # <min size> <new actual size>
        min over swap # <new actual size> <old size>
        >r swap # <new actual size> <new addr> <old size>
        allocator_decrement_current_bytes_allocated dup # to avoid double counting # <new actual size> ...
        malloc_actual_size swap # <old size> <new size> 
        >r swap # <old size> <addr> <new size>
        block_allocator_get_block_size
    } # <allocator> <addr> <new size>
    block_allocator_get_allocator_for_block dup
    allocator_decrement_current_bytes_allocated allocator_get_actual_size dup
} ;

# use only large block allocator
if { false } {
    def "malloc" {
        drop allocator_alloc_large_block
    }

    def "free" {
        drop allocator_free_large_block
    }

    def "realloc" {
        2drop allocator_realloc_large_block
    }
} {
    # <addr> <new size> -> <addr>
    def "realloc" { drop realloc_actual_size }

    # <addr> ->
    def "free" {
        if { not } { exit 1 print_string "unable to free memory" } { }
        free_checked
    }

    # <size> -> <addr>
    def "malloc" { drop malloc_actual_size }
} ;

# <addr> -> <bool>
def "is_not_freed" {
    if { = -1 } {
        true drop # large block allocator
    } {
        block_allocator_check_bitset
    } # <allocator> <addr>
    block_allocator_get_allocator_for_block dup
} ;

def "assert_not_free" {
    assert "address was not freed" is_not_freed
} ;

# add instrumentation
#rename_word "write_mem_i64" "allocator_temp_write_mem_i64" ;
#def "write_mem_i64" {
#    allocator_temp_write_mem_i64 assert_not_free dup
#} ;
