# import lib.2s
# import block_allocator.2s

constant "allocator_array" syscall_mmap_anon 4096 ;

block_allocator_set_block_size swap -1
+ block_allocator_instance_size
block_allocator_init over - 2048 8
+ block_allocator_instance_size
block_allocator_init over - 1024 8
+ block_allocator_instance_size
block_allocator_init over - 512 8
+ block_allocator_instance_size
block_allocator_init over - 256 8
+ block_allocator_instance_size
block_allocator_init over 128
+ block_allocator_instance_size
block_allocator_init over 64
+ block_allocator_instance_size
block_allocator_init over 32
+ block_allocator_instance_size
block_allocator_init over 16
+ block_allocator_instance_size
block_allocator_init over 8
allocator_array ;

# <size> -> <aligned size>
def "allocator_align_to_page_size" {
    * 4096 + 1 / swap 4096 + -1
} ;

# <min size> -> <actual size> <addr>
def "allocator_alloc_large_block" {
    #debug "large block alloc return"
    + -16 swap
    + 16
    write_mem_i64 + 8 2dup # <addr> <aligned size> save size
    write_mem_i64 swap -1 dup # <addr> <aligned size> mark page header to make it distinguishable from block_allocator's blocks
    #debug "large block alloc after mmap"
    syscall_mmap_anon dup # <aligned size>
    allocator_align_to_page_size + 16
    #debug "large block start"
} ;

# <addr> -> <bool>
def "allocator_free_large_block" {
    if { = 16 % swap 4096 dup } {
        if { = -1 read_mem_i64 dup } {
            = 0 # syscall error code
            syscall_munmap swap # <size> <addr (header)>
            read_mem_i64 + 8 dup # <addr (header)>
        } {
            false drop # bad page header
        }
        + -16
    } {
        false drop # bad page offset
    }
} ;

# <addr> <new size> -> <bool> <actual size> <addr>
def "allocator_realloc_large_block" {
    if { = 16 % swap 4096 dup } {
        if { = -1 read_mem_i64 dup } {
            > 0 over # <actual size> <addr> syscall error code check
            allocator_align_to_page_size swap # <new addr> <new size>
            syscall_remap swap # <old size> <addr (header)> <new size> <new size>
            read_mem_i64 + 8 dup # <addr (header)> <new size> <new size>
        } {
            false drop # bad page header
        }
        + -16
    } {
        false drop # bad page offset
    }
    swap dup swap
} ;

# <min size> -> <actual size> <addr>
def "malloc_actual_size" {
    if { not = -1  block_allocator_get_block_size dup } {
        block_allocator_get_block_size swap # <block> <allocator>
        block_allocator_allocate dup # <allocator>
        drop swap
    } {
        allocator_alloc_large_block drop # <null allocator> <min size>
    }
    while { 
        and 
            not = -1 block_allocator_get_block_size over
            <= block_allocator_get_block_size 2dup
    } {
        + block_allocator_instance_size
    } # <allocator array> <min size>
    allocator_array 
} ;

# <size> -> <addr>
def "malloc" { drop malloc_actual_size } ;

# <addr> ->
def "free" {
    if { not } { exit 1 print_string "unable to free memory" } { }
    if { = -1 dup } {
        allocator_free_large_block drop # <-1> <addr>
    } {
        if {
            and
                <= allocator_array swap # <bool> <allocator> <addr>
                >= + * 8 block_allocator_instance_size allocator_array dup # <allocator> <addr> 
        } {
            #debug "free after block_allocator_free"
            block_allocator_free
            #debug "free before block_allocator_free"
        } { false 2drop } # bad allocator address
    } # <allocator> <addr>
    #debug "free after get_allocator"
    block_allocator_get_allocator_for_block dup
} ;

# <addr> <new size> -> <actual size> <addr>
def "realloc_actual_size" {
    debug "realloc end"
    if { not } { exit 1 print_string "unable to realloc memory" } { }
    if { = -1 dup } {
        allocator_realloc_large_block drop # <-1> <addr> <new size>
    } {
        block_allocator_free r> # <new actual size>
        .s
        memcopy r@ dup r> # <min size> <new actual size>
        min over swap # <new actual size> <old size>
        .s
        >r swap # <new actual size> <new addr> <old size>
        .s
        malloc_actual_size swap # <old size> <new size> 
        >r swap # <old size> <addr> <new size>
        .s
        block_allocator_get_block_size
    } # <allocator> <addr> <new size>
    debug "realloc after get_allocator"
    block_allocator_get_allocator_for_block dup
} ;

# <addr> <new size> -> <addr>
def "realloc" { drop realloc_actual_size } ;



    print_bool
    free r>
    and =
        42
        read_mem_byte + 99 r@
    and =
        0
        read_mem_byte + 100 r@
    and =
        42
        read_mem_byte r@
    >r realloc swap 500 r>
    memset r@ 42 100
    >r malloc 100
    true
    ;
