# import lib.2s

constant "block_allocator_instance_size" * 4 8 ;

# <free block> -> <next free block>
def "block_allocator_block_get_next_block" {
    read_mem_i64
} ;

# <free block> <next free block> ->
def "block_allocator_block_set_next_block" {
    write_mem_i64
} ;

# <page pointer> <allocator pointer> ->
def "block_allocator_page_init" {
    write_mem_i64
} ;

# <allocator pointer> -> <page pointer>
def "block_allocator_get_pointer_to_last_page" {
    read_mem_i64 + 16
} ;

# <allocator pointer> <page pointer> ->
def "block_allocator_set_pointer_to_last_page" {
    write_mem_i64 + 16
} ;

# <allocator pointer> -> <value>
def "block_allocator_get_next_unalloc_space" {
    read_mem_i64 + 24
} ;

# <allocator pointer> <value> ->
def "block_allocator_set_next_unalloc_space" {
    write_mem_i64 + 24
} ;

# <allocator pointer> -> <value>
def "block_allocator_get_block_size" {
    read_mem_i64
} ;

# <allocator pointer> <value> ->
def "block_allocator_set_block_size" {
    write_mem_i64
} ;

# <allocator pointer> -> <value>
def "block_allocator_get_pointer_to_freelist" {
    read_mem_i64 + 8
} ;

# <allocator pointer> <value> ->
def "block_allocator_set_pointer_to_freelist" {
    write_mem_i64 + 8
} ;

# <allocator> -> <bitset size>
def "block_allocator_bitset_size" {
    + 1 / swap 8 / 4096 block_allocator_get_block_size
} ;

# <allocator> -> <page header size>
def "block_allocator_page_header_size" {
    + 8 align_mem_size block_allocator_bitset_size
} ;

# <allocator pointer> -> # allocator.block_size must be initialized
def "block_allocator_alloc_new_page" {
    #print_string "new page\n"
    block_allocator_set_next_unalloc_space swap + rot # <page header size> <allocator> <page>
    block_allocator_page_header_size dup # <allocator> <page>
    block_allocator_set_pointer_to_last_page 2dup swap # <page> <allocator>
    block_allocator_page_init 2dup # init page <page> <allocator>
    syscall_mmap_anon 4096 
} ;

# <allocator> <block size>
def "block_allocator_init" {
    block_allocator_alloc_new_page # <allocator>
    block_allocator_set_pointer_to_freelist swap 0 dup # <allocator>
    block_allocator_set_block_size -rot dup
} ;

# <block> -> <page>
def "block_allocator_get_block_page" {
    - swap % swap 4096 dup
} ;

# <block> -> <allocator>
def "block_allocator_get_allocator_for_block" {
    read_mem_i64 block_allocator_get_block_page
} ;

# <block> -> <bitset>
def "block_allocator_get_block_page_index" {
    / swap block_allocator_get_block_size r> # <block offset>
    - swap  # <page header size> <block page offset>
        block_allocator_page_header_size r@ # <block page offset>
    - swap block_allocator_get_block_page dup # <block>
    >r # <allocator> <block>
    block_allocator_get_allocator_for_block dup
} ;

# <block> <bool> ->
def "block_allocator_update_bitset" {
    if { } { bitset_add } { bitset_remove } # <bool> <bitset> <n>
    rot # <bitset> <n> <bool>
    + 8 block_allocator_get_block_page swap # <n> <block> <bool>
    block_allocator_get_block_page_index dup # <block> <bool>
} ; 

# <block> -> <bool>
def "block_allocator_check_bitset" {
    bitset_contains
        + 8 block_allocator_get_block_page r>
        block_allocator_get_block_page_index r@
    >r
} ;

# <allocator> -> <block>
def "block_allocator_allocate" {
    block_allocator_update_bitset swap true dup
    if { not = 0 dup } {
        block_allocator_set_pointer_to_freelist rot # <next free block> <free block> <allocator>
        block_allocator_block_get_next_block dup # <free block> <allocator>
    } {
        r>
        block_allocator_set_next_unalloc_space swap # <next nus> <allocator>
        + block_allocator_get_block_size over # <nus> <allocator>
        >r dup # <nus> <allocator>
        block_allocator_get_next_unalloc_space dup # <allocator>
        if {
            swap r>
            <=
                +
                    block_allocator_get_block_size r@
                    block_allocator_get_next_unalloc_space r@
                +
                    block_allocator_get_pointer_to_last_page r@
                    4096
            >r # <allocator>
        } { } {
            block_allocator_alloc_new_page dup
        }
        drop # <null pointer> <allocator>
    }
    block_allocator_get_pointer_to_freelist dup 
} ;

# <block> -> <bool>
def "block_allocator_free" {
    if { dup block_allocator_check_bitset dup } {
        block_allocator_update_bitset swap false
        block_allocator_set_pointer_to_freelist r> dup # <block> <bool>
        block_allocator_block_set_next_block swap
            block_allocator_get_pointer_to_freelist r@ dup # <block> <bool>
        >r block_allocator_get_allocator_for_block dup swap # <bool> <block>
    } { }
}
