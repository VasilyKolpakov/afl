# import allocator.2s

constant "rng_instance" syscall_mmap_anon 4096 ;
random_init rng_instance 120 ;

def "rng_int32" {
    random_next_int rng_instance
} ;

constant "num_iterations" 1000 ;

print_newline . allocator_get_current_bytes_allocated print_string "before test: " ;
do_n_times num_iterations {
    #debug "malloc result"
    if {
        and
            > * 2 + 16 -rot
            <= # <random size> <actual size> <random size> <actual size> <addr> 
        2dup 
        2dup 
        rot 
    } { 2drop } { exit 1 print_string "bad actual size" print_newline . print_newline . } # <actual size> <addr> <random size>
    malloc_actual_size dup # <random size>
    #debug "malloc args"
    + 8 % swap 10000 rng_int32
} ;
;
do_n_times num_iterations {
    if { } { } { exit 1 print_string "test failed" }
    free_checked
} ;

print_newline . allocator_get_current_bytes_allocated print_string "after simple malloc test: " ;
malloc 4096 ;
do_n_times num_iterations {
    realloc swap
        + 8 % swap 10000 rng_int32
} ;
free ;
print_newline . allocator_get_current_bytes_allocated print_string "after realloc test: " ;

# this test allocates N buffers and reallocates them to random sizes
# every buffer is initialised with it's index in every byte
# test iteration does the following:
#   - choose random number R from 0 to N-1
#   - reallocate R-th buffer to a size from 0 to 10000
#   - init the buffer with R in every byte
#   - check all buffers

constant "N" 100 ;
constant "buffer_array" malloc * 16 N ;
print_newline . allocator_get_current_bytes_allocated print_string "after buffer array alloc: " ;
# <buffer> <size> <index>
def "put_buffer_to_array" {
    write_mem_i64 swap # <buffer> <buffer cell>
    dip { write_mem_i64 + 8 swap } # <buffer> <size> <buffer cell> <buffer cell>
    2dip { dup + buffer_array * 16 } 
} ;

def "random_buffer_size" {
    + 8
    % swap 4000 rng_int32
} ;
def "init_buffer_array" {
    drop 
    while { > N dup } {
        + 1
        memset dip { swap }
        put_buffer_to_array 3dup # <buffer> <actual size> <index> <index>
        swap malloc_actual_size random_buffer_size # <index> <index>
        dup
    } 0
} ;


# <buffer> <buffer size> <byte value> -> 
def "check_buffer" {
    2drop
    do_n_times swap {
        swap + 1 swap
        if { not = 2dup } {
            exit 1
            print_newline
            .
            print_string ", bad buffer: "
            .
            print_string ", expected: "
            .
            print_string "actual: "
        } { drop } # <byte> <byte value> <address>
        read_mem_byte over # <byte value> <address>
    }
    # <buffer size> <byte value> <buffer>
    -rot
    #debug "check_buffer start"
} ;

# <index> -> <buffer>
def "buffer_array_get_buffer" {
    read_mem_i64 + buffer_array * 16
} ;

# <index> -> <buffer size>
def "buffer_array_get_size" {
    read_mem_i64 + 8 + buffer_array * 16
} ;

# <index> ->
def "check_nth_buffer" {
    check_buffer
        bi
            { buffer_array_get_buffer }
            { buffer_array_get_size }
        dup
} ;

def "check_all_buffers" {
    drop 
    while { > N dup } {
        + 1
        check_nth_buffer dup
    } 0
} ;

# <index> ->
def "realloc_nth_buffer" {
    memset dip { swap }
    put_buffer_to_array 3dup # <new buffer> <size> <index>
    check_buffer dip { min } # <new buffer> <size> <old size> <index> <new buffer> <size> <index>
    2dip { buffer_array_get_size dup } 3dup # <new buffer> <size> <index>
    realloc rot dup random_buffer_size # <old buffer> <index>
    buffer_array_get_buffer dup
} ;

print_newline . allocator_get_current_bytes_allocated print_string "before randomized realloc test: " ;

init_buffer_array ;
print_newline . allocator_get_current_bytes_allocated print_string "after buffer array init: " ;
check_all_buffers ;

do_n_times 100 {
    check_all_buffers
    realloc_nth_buffer % rng_int32 N
} ;

print_newline . allocator_get_current_bytes_allocated print_string "after reallocs: " ;
drop 
while { > N dup } {
    + 1
    free buffer_array_get_buffer dup
} 0 ;

print_newline . allocator_get_current_bytes_allocated print_string "after free: " ;
free buffer_array ;
print_newline . allocator_get_current_bytes_allocated print_string "end: " ;

.s ;
print_string "OK\n" ;

exit 0 ;
