# import core_lib.2s
# import syscalls.2s
# import stacktrace.2s

# <n> <function>
def "do_n_times" {
    2drop
    while { < 0 dup } {
        r> r> call >r dup >r + -1 
    }
} ;

# <n1> <n2> -> <n>
def "min" {
    drop if { < 2dup } { swap } { }
} ;

# <n1> <n2> -> <n>
def "max" {
    drop if { > 2dup } { swap } { }
} ;

# <number> -> <number>
def "round_up_to_power_of_two" {
   + 1
   bit_or bit_rshift swap 32 dup
   bit_or bit_rshift swap 16 dup
   bit_or bit_rshift swap 8 dup
   bit_or bit_rshift swap 4 dup
   bit_or bit_rshift swap 2 dup
   bit_or bit_rshift swap 1 dup
   - swap 1
} ;

# <size> -> <byte size>
def "bitset_size" { if { not = 0 dup } { + 1 / swap 8 + -1 } { 0 drop } } ;

# <address> <n> -> <bit n> <byte address>
def "bitset_bit_address" {
   % swap 8 swap    # <bit n> <byte address>
   +                # <byte address> <n>
   / swap 8 over    # <address> <n> 
} ;

# <address> <n> ->
def "bitset_add" {
    write_mem_byte      # <byte address> <updated byte>
    swap bit_or         # <byte with bit> <old byte> <byte address>
    bit_lshift 1    # <bit n> <old byte> <byte address>
    swap                # <byte> <bit n> <byte address>
    read_mem_byte over  # <bit n> <byte address>
    bitset_bit_address
} ;

# <address> <n> ->
def "bitset_remove" {
    write_mem_byte      # <byte address> <updated byte>
    swap bit_and         # <byte with bitmask> <old byte> <byte address>
    bit_xor -1 bit_lshift 1    # <bit n> <old byte> <byte address>
    swap                # <byte> <bit n> <byte address>
    read_mem_byte over  # <bit n> <byte address>
    bitset_bit_address
} ;

# <address> <n> -> <bool>
def "bitset_contains" {
    = bit_and over swap   # <bit byte> <byte>
    bit_lshift 1 swap   # <byte> <bit n>
    read_mem_byte swap  # <bit n> <byte address>
    bitset_bit_address
} ;

# <address> <n> ->
def "memzero" {
    2drop
    while { not = 0 over } {
        + 1
        swap + -1 swap
        write_mem_byte swap 0 dup
    }
} ;

# <address> <byte value> <count> ->
def "memset" {
    2drop
    do_n_times swap {
        + 1 # <address> <byte value>
        write_mem_byte 2dup # <address> <byte value>
    }
    rot
} ;

# <size> <pointer 1> <pointer 2> -> <-1 or 0 or 1>
def "memcmp" {
    dip { 2drop } drop
    while { and bi* { < 0 } { = 0 } 2dup } { # while size > 0 and result = 0
        + -1 2dip { bi@ { + 1 } } # advance pointers and decrement size
        dip {
            compare_i64 bi@ { read_mem_byte } 2dup
            drop
        }
    }
    # <size> <cmp result> <p1> <p2>
    dip { 0 }
} ;

# <byte mem size> -> <8-byte aligned byte size>
def "align_mem_size" {
    * 8 / swap 8 + 7
} ;

constant "random_instance_size" 8 ;

# <seed> -> <scrambled seed>
def "random_initial_scramble" {
    bit_and
        - bit_lshift 1 48 1
        bit_xor 25214903917
} ;

# <seed> -> <next seed>
def "random_next_seed" {
    bit_and
        - bit_lshift 1 48 1
        + 11 * 25214903917
} ;

# <address> <seed> ->
def "random_init" {
    write_mem_i64 dip { random_initial_scramble }
} ;

# <address> -> <number>
def "random_next_int" {
    bit_and
        - bit_lshift 1 33 1
    bit_rshift swap 16
    write_mem_i64 # <address> <next seed> <next seed>
    rot dup random_next_seed # <seed> <address>
    read_mem_i64 dup
} ;

# <syscall ret value> -> <syscall ret value>
def "panic_on_syscall_error" {
    if {
        drop r> and
            < -4096 r@
            > 0 r@
        >r dup
    } { exit 1 stacktrace_print_return_stack_except_n_slots 2 print_newline . * -1 print_string "syscall error: " dup } { }
} ;

# <msg> <bool> ->
def "assert" {
    if { not swap } {
        exit 1
        stacktrace_print_return_stack_except_n_slots 1
        print_string "Stacktrace:\n"
        print_newline
        print_string
        print_string "failed assertion: "
    } { drop }
} ;

# <func> -> <func>
def "TCO" {
    keep {
        write_mem_i64 swap jmp_instruction_code
        + 16
        read_mem_i64 + 8
    }
    keep {
        assert "tail call" = call_instruction_code
        read_mem_i64
        + 16
        read_mem_i64 + 8
    }
} ;

# <buffer> <size>
def "print_buffer" {
    assert "buffer is fully written" =
    dip {
        panic_on_syscall_error
        syscall 1 1 2dip { 1 2 3 }
    }
    over
} ;

# <n> -> <buffer> <length>
def "argv_get_buffer" {
    keep { - swap }
    swap
    # <buffer end> <buffer>
    while { not = 0 read_mem_byte dup } {
        + 1
    }
    dup
    # <null-term str>
    drop while { < 0 dup } {
        + -1
        dip {
            + 1
            while { not = 0 read_mem_byte dup } {
                + 1
            }
        }
    }
    dip { argv }
    assert "argc > n" > argc dup
    assert "0 <= n" <= 0 dup
} ;

