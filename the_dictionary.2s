def "td_def_list" { 
    read_mem_i64 the_dictionary
} ;

# <record> -> <name>
def "td_dict_record_name" {
    read_mem_i64
} ;

# <record> -> <word_def>
def "td_dict_record_word_def" {
    read_mem_i64 + 8
} ;

# <record> -> <next>
def "td_dict_record_next" {
    read_mem_i64 + 16
} ;

# <word def> -> <address>
def "td_word_def_address" {
    read_mem_i64
} ;

# <word def> -> <is function>
def "td_word_def_is_function" {
    read_mem_i64 + 8
} ;

def "print_all_function_names_and_addresses" {
    while { not = 0 dup } {
        td_dict_record_next
        if {
            td_word_def_is_function td_dict_record_word_def dup
        } {
            print_newline
            . td_word_def_address td_dict_record_word_def dup
            print_string ", address: "
            print_string td_dict_record_name dup
            print_string "name: "
        } { }
    }
    td_def_list
} ;

# <func> -> <bool> <string>
def "td_find_function_name" {
    if { = 0 dup } {
        false
    } {
        true td_dict_record_name
    }
    drop swap
    while {
        lazy_and {
            not
            lazy_and { = td_word_def_address td_dict_record_word_def 2dup }
            td_word_def_is_function td_dict_record_word_def dup
        }
        not = 0 dup
    } {
        td_dict_record_next
        # <record> <func>
    } td_def_list 
} ;

# <op code> -> <bool> <string>
def "td_find_instruction_name" {
    if { = 0 dup } {
        false
    } {
        true td_dict_record_name
    }
    drop swap
    while {
        lazy_and {
            not
            lazy_and { = td_word_def_address td_dict_record_word_def 2dup }
            not td_word_def_is_function td_dict_record_word_def dup
        }
        not = 0 dup
    } {
        td_dict_record_next
        # <record> <func>
    } td_def_list 
} ;

def "td_function_has_name" {
    drop swap td_find_function_name
} ;

